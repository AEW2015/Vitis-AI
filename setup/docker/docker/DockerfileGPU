# docker build . --buildarg VERSION=1.0.1 -t
FROM nvidia/cuda:10.0-cudnn7-runtime-ubuntu18.04
env DEBIAN_FRONTEND=noninteractive
SHELL ["/bin/bash", "-c"]
# RUN apt-get install timezone
ENV TZ=America/Denver
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
ENV VAI_ROOT=/opt/vitis_ai
ARG VERSION
ENV VERSION=$VERSION
ENV DATE=$(date)

# 1_Dockerfile.apt
RUN chmod 1777 /tmp && apt-get update -y && apt-get install -y --no-install-recommends \
        sudo \
        git \
        zstd \
        tree \
        vim \
        wget \
        bzip2 \
        ca-certificates \
        curl \
        unzip \
        python3-minimal \
        python3-venv \
        python3-pip \
        python3-setuptools \
        python3 \
        python3-dev \
        python3-numpy \
        g++ \
        make \
        cmake \
        automake \
        build-essential \
        autoconf \
        libboost-all-dev \
        libgoogle-glog-dev \
	libgflags-dev \
	libunwind-dev \
	libtool \
        openssh-client \
        openssl \
        libjson-c-dev \
        libssl-dev \
        libgtest-dev \
        software-properties-common \
        bc \
        yasm

# Tools for building vitis-ai-library in the docker container
RUN apt-get -y install \
        libgtest-dev \
        libeigen3-dev \
        rpm \
        libavcodec-dev \
        libavformat-dev \
        libswscale-dev \
        libgstreamer-plugins-base1.0-dev \
        libgstreamer1.0-dev \
        libgtk-3-dev \
        libpng-dev \
        libjpeg-dev \
        libopenexr-dev \
        libtiff-dev \
        libwebp-dev \
        libgtk2.0-dev \
        opencl-clhpp-headers \
        opencl-headers \
        pocl-opencl-icd \
        && \
    add-apt-repository -y ppa:ubuntu-toolchain-r/test && \
    apt install -y gcc-8 g++-8 gcc-9 g++-9 && \
    cd /usr/src/gtest && \
    mkdir -p build && \
    cd build && \
    cmake .. && \
    make && \
    make install

# 2_Dockerfile.pip3
RUN pip3 install \
        Flask \
        setuptools \
        wheel

#install XRT
#RUN wget --progress=dot:mega https://www.xilinx.com/bin/public/openDownload?filename=xrt_201920.2.3.1301_18.04-xrt.deb -O scratch/xrt.deb && \
#       apt-get install -y --no-install-recommends /scratch/*.deb
#COPY xrt_201920.2.5.309_18.04-amd64-xrt.deb /tmp
#COPY xrt_201920.2.5.309_18.04-amd64-container.deb /tmp
#COPY xrt_201920.2.5.309_18.04-amd64-xbtest.deb /tmp
#RUN cd /tmp/ && sudo apt-get update && apt-get install -y /tmp/*.deb && rm -fr /tmp/*
RUN cd /tmp/ &&  wget --progress=dot:mega -O xrt.deb http://xcogpuvai01.xilinx.com:8000/xrt_202020.2.8.569_18.04-amd64-xrt.deb && sudo apt-get update && apt-get install -y /tmp/*.deb && apt-get clean  && rm -fr /tmp/*

# cmake 3.16.1
RUN cd /tmp; wget --progress=dot:mega https://github.com/Kitware/CMake/releases/download/v3.16.1/cmake-3.16.1.tar.gz && \
    tar xvf cmake-3.16.1.tar.gz && \
    cd cmake-3.16.1 && \
    ./configure && \
    make -j 30 && \
    make install && \
    rm -fr /tmp/* && \
    ldconfig

# glog 0.4.0
RUN cd /tmp/ && wget --progress=dot:mega -O glog.0.4.0.tar.gz https://codeload.github.com/google/glog/tar.gz/v0.4.0 && \
    tar -xvf  glog.0.4.0.tar.gz && cd /tmp/glog-0.4.0 &&  ./autogen.sh && \
    mkdir build  && cd build && cmake -DBUILD_SHARED_LIBS=ON ..&& make -j 12&& make install && rm -fr /tmp/*

# protobuf 3.4.0
RUN cd /tmp; wget --progress=dot:mega https://codeload.github.com/google/protobuf/zip/v3.4.0 && \
    unzip v3.4.0 && \
    cd protobuf-3.4.0 && \
    ./autogen.sh && \
    ./configure && \
    make -j 30 && \
    make install && \
    ldconfig && \
    rm -fr /tmp/*

 # opencv 3.4.3
RUN export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" && \
    cd /tmp; wget --progress=dot:mega https://github.com/opencv/opencv/archive/3.4.3.tar.gz && \
    tar -xvf 3.4.3.tar.gz && \
    cd opencv-3.4.3 && \
    mkdir build && \
    cd build && \
    cmake -DBUILD_SHARED_LIBS=ON .. && \
    make -j 30 && \
    make install && \
    ldconfig && \
    export PATH="${VAI_ROOT}/conda/bin:${VAI_ROOT}/utility:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" && \
    rm -fr /tmp/*

# gflags 2.2.2
RUN cd /tmp; wget --progress=dot:mega https://github.com/gflags/gflags/archive/v2.2.2.tar.gz && \
    tar xvf v2.2.2.tar.gz && \
    cd gflags-2.2.2 && \
    mkdir build; cd build && \
    cmake -DBUILD_SHARED_LIBS=ON .. && \
    make -j 30 && \
    make install && \
    rm -fr /tmp/*

# ffmpeg 2.8.15
RUN cd /tmp; wget --progress=dot:mega https://github.com/FFmpeg/FFmpeg/archive/n2.8.15.tar.gz && \
    tar xvf n2.8.15.tar.gz && \
    cd FFmpeg-n2.8.15/ && \
    ./configure  --enable-pic --enable-shared && \
    make -j 30 && \
    make install && \
    rm -fr /tmp/*

# pybind 2.5.0
RUN cd /tmp; git clone https://github.com/pybind/pybind11.git && \
    cd pybind11 && \
    git checkout v2.5.0 && \
    mkdir build && \
    cd build && \
    cmake -DPYBIND11_TEST=OFF .. && \
    make && \
    make install && \
    rm -fr /tmp/* && \
    chmod 777 /usr/lib/python3/dist-packages

RUN cd /tmp && wget --progress=dot:mega http://launchpadlibrarian.net/436533799/libjson-c4_0.13.1+dfsg-4_amd64.deb && \
    dpkg -i libjson-c4_0.13.1+dfsg-4_amd64.deb && \
    rm -fr /tmp/*

# 6_Dockerfile.xrt

# 3_Dockerfile.deephi
#RUN mkdir -p $VAI_ROOT/compression && \
#       ln -s $VAI_ROOT/conda/envs/vitis-ai-caffe/bin/decent_q $VAI_ROOT/compression/vai_q_caffe && \
#       ln -s $VAI_ROOT/conda/envs/vitis-ai-tensorflow/bin/decent_q $VAI_ROOT/compression/vai_q_tensorflow

#RUN mkdir -p $VAI_ROOT/compiler && \
#       ln -s $VAI_ROOT/conda/envs/vitis-ai-caffe/lib/python3.6/site-packages/vai/dpuv1/tools/compile/bin/vai_c_caffe.py $VAI_ROOT/compiler/vai_c_caffe && \
#       ln -s $VAI_ROOT/conda/envs/vitis-ai-tensorflow/lib/python3.6/site-packages/vai/dpuv1/tools/compile/bin/vai_c_tensorflow.py $VAI_ROOT/compiler/vai_c_tensorflow


# 3_Dockerfile.deephi.compiler
ENV PATH="${VAI_ROOT}/utility:${PATH}"

#  4_Dockerfile.conda
ENV MY_CONDA_CHANNEL=http://artifactory/artifactory/vitis-ai-release

RUN mkdir -p /scratch && wget --progress=dot:mega https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /scratch/miniconda.sh && \
        /bin/bash /scratch/miniconda.sh -b -p $VAI_ROOT/conda && \
        ln -s $VAI_ROOT/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
        echo ". $VAI_ROOT/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
        echo "conda activate base" >> ~/.bashrc \
        && echo "VERSION=${VERSION}" >> ~/.bashrc

# 5_Dockerfile.conda.create.cpu
# Nasser copy these from gitlab
ADD docker/gpu_conda/*.yml /scratch/
ADD docker/pip_requirements.txt /scratch/
ADD docker/pip_requirements_neptune.txt /scratch/

#hack to re-do the layer
#ADD "https://www.random.org/cgi-bin/randbyte?nbytes=10&format=h" skipcache
ARG CACHEBUST=1
# need pass the build arg docker build --build-arg CACHEBUST=$(date +%s)

RUN . $VAI_ROOT/conda/etc/profile.d/conda.sh \
    && conda env create -f /scratch/vitis-ai-optimizer_darknet.yml \
    && conda env create -f /scratch/vitis-ai-optimizer_caffe.yml \
    && conda env create -f /scratch/vitis-ai-optimizer_tensorflow.yml \
    && conda env create -f /scratch/vitis-ai-lstm.yml \
        && conda activate vitis-ai-lstm \
        && pip install -r /scratch/pip_requirements.txt \
    && conda env create -f /scratch/vitis-ai-pytorch.yml \
        && conda activate vitis-ai-pytorch \
        && pip install -r /scratch/pip_requirements.txt \
    && conda env create -f /scratch/vitis-ai-caffe.yml \
        && conda activate vitis-ai-caffe \
        && pip install -r /scratch/pip_requirements.txt \
    && conda env create -f /scratch/vitis-ai-tensorflow.yml \
        && conda activate vitis-ai-tensorflow \
        && pip install -r /scratch/pip_requirements.txt \
    && conda env create -f /scratch/vitis-ai-tensorflow2.yml \
        && conda activate vitis-ai-tensorflow2 \
        && pip install -r /scratch/pip_requirements.txt \
        && pip install --ignore-installed tensorflow==2.3.0 \
    && mkdir -p $VAI_ROOT/compiler \
        && conda activate vitis-ai-caffe \
        && sudo cp -r $CONDA_PREFIX/lib/python3.6/site-packages/vaic/arch $VAI_ROOT/compiler/arch


#hack to re-do the layer
#ADD "https://www.random.org/cgi-bin/randbyte?nbytes=10&format=h" skipcache
ARG CACHEBUST=1
RUN sudo mkdir -p /etc/apt/sources.list.d && \
    sudo echo "deb [trusted=yes] http://artifactory/artifactory/vitis-ai-deb-release bionic main" >> /etc/apt/sources.list.d/xlnx.list && \
    sudo cat /etc/apt/sources.list.d/xlnx.list && \
    sudo apt-get update -y && sudo apt-get install -y libunilog libtarget-factory libxir libvart libvitis_ai_library libbutler-base librt-engine aks && \
    sudo rm -rf  /etc/apt/sources.list.d/xlnx.list && \
    sudo ldconfig



# 7_Dockerfile.clean

RUN apt-get clean && rm -rf /var/lib/apt/lists/* && rm -rf /scratch/*

RUN echo $VERSION > /etc/VERSION.txt

ADD docker/login.sh /etc/
ENTRYPOINT ["/etc/login.sh"]

ADD docker/banner.sh /etc/
